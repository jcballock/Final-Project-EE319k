


ARM Macro Assembler    Page 1 


    1 00000000         ; Print.s
    2 00000000         ; Student names: change this to your names or look very 
                       silly
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         ; Runs on LM4F120 or TM4C123
    5 00000000         ; EE319K lab 7 device driver for any LCD
    6 00000000         ;
    7 00000000         ; As part of Lab 7, students need to implement these LCD
                       _OutDec and LCD_OutFix
    8 00000000         ; This driver assumes two low-level LCD functions
    9 00000000         ; ST7735_OutChar   outputs a single 8-bit ASCII characte
                       r
   10 00000000         ; ST7735_OutString outputs a null-terminated string 
   11 00000000 FFFFFFF4 
                       cnt     EQU              -12
   12 00000000 FFFFFFFC 
                       sum     EQU              -4
   13 00000000 FFFFFFF8 
                       sum2    EQU              -8
   14 00000000 FFFFFFF0 
                       n       EQU              -16
   15 00000000         
   16 00000000                 IMPORT           ST7735_OutChar
   17 00000000                 IMPORT           ST7735_OutString
   18 00000000                 EXPORT           LCD_OutDec
   19 00000000                 EXPORT           LCD_OutFix
   20 00000000         
   21 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   22 00000000                 THUMB
   23 00000000         
   24 00000000         
   25 00000000         
   26 00000000         ;-----------------------LCD_OutDec----------------------
                       -
   27 00000000         ; Output a 32-bit number in unsigned decimal format
   28 00000000         ; Input: R0 (call by value) 32-bit unsigned number
   29 00000000         ; Output: none
   30 00000000         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   31 00000000         LCD_OutDec
   32 00000000 E92D 4800       PUSH             {R11, LR}   ;save R11
   33 00000004 46EB            MOV              R11, SP
   34 00000006 B40F            PUSH             {R0, R1, R2, R3} ; save number
   35 00000008         ; Done with allocation
   36 00000008 F04F 0300       MOV              R3, #0
   37 0000000C F84B 3C04       STR              R3,[R11,#sum] ; sum = 0
   38 00000010 F84B 3C0C       STR              R3,[R11,#cnt] ; cnt = 0
   39 00000014         outdec_loop
   40 00000014 F85B 0C10       LDR              R0, [R11,#n] ; load R3 with num
                                                            ber
   41 00000018 F04F 010A       MOV              R1, #10
   42 0000001C FBB0 F2F1       UDIV             R2, R0, R1  ; modulo
   43 00000020 FB01 0012       MLS              R0, R1, R2, R0
   44 00000024         ;
   45 00000024 F85B 3C04       LDR              R3, [R11,#sum]
   46 00000028 F85B 2C0C       LDR              R2, [R11,#cnt] ; set r2 to cnt 
                                                            offset



ARM Macro Assembler    Page 2 


   47 0000002C 2A20            CMP              R2, #0x20
   48 0000002E DB0D            BLT              no_more_offset
   49 00000030 F85B 3C08       LDR              R3, [R11,#sum2]
   50 00000034 F1A2 0220       SUB              R2, R2, #0x20
   51 00000038 FA00 F002       LSL              R0, R2
   52 0000003C 4403            ADD              R3, R0
   53 0000003E F102 0224       ADD              R2, R2, #0x24
   54 00000042 F84B 3C08       STR              R3, [R11,#sum2]
   55 00000046 F84B 2C0C       STR              R2, [R11,#cnt]
   56 0000004A E008            B                skip
   57 0000004C         no_more_offset
   58 0000004C FA00 F002       LSL              R0, R2
   59 00000050 4403            ADD              R3, R0
   60 00000052 F102 0204       ADD              R2, R2, #0x04 ; set next cnt of
                                                            fset
   61 00000056 F84B 3C04       STR              R3, [R11,#sum]
   62 0000005A F84B 2C0C       STR              R2, [R11,#cnt]
   63 0000005E         ;
   64 0000005E         skip
   65 0000005E F85B 3C10       LDR              R3, [R11,#n] ; load R3 with num
                                                            ber
   66 00000062 FBB3 F3F1       UDIV             R3, R3, R1
   67 00000066 F84B 3C10       STR              R3,[R11,#n] ; store r3/10 to th
                                                            e number
   68 0000006A 2B00            CMP              R3, #0
   69 0000006C D1D2            BNE              outdec_loop
   70 0000006E F85B 0C08       LDR              R0, [R11,#sum2]
   71 00000072 F1A0 0004       SUB              R0, R0, #4
   72 00000076 F84B 0C08       STR              R0, [R11,#sum2]
   73 0000007A         outchar_loop
   74 0000007A F85B 0C04       LDR              R0, [R11,#sum]
   75 0000007E F04F 020F       MOV              R2, #0x0F
   76 00000082 F85B 1C0C       LDR              R1, [R11,#cnt]
   77 00000086 F1A1 0104       SUB              R1, R1, #0x04
   78 0000008A F84B 1C0C       STR              R1, [R11,#cnt]
   79 0000008E 2920            CMP              R1, #0x20
   80 00000090 DB0E            BLT              no_count_offset
   81 00000092 F85B 0C08       LDR              R0, [R11,#sum2]
   82 00000096 F1A1 0120       SUB              R1, R1, #0x20
   83 0000009A FA02 F201       LSL              R2, R1
   84 0000009E EA00 0002       AND              R0, R0, R2
   85 000000A2 FA20 F001       LSR              R0, R1
   86 000000A6 F101 0120       ADD              R1, R1, #0x20
   87 000000AA F100 0030       ADD              R0, R0, #0x30
   88 000000AE E007            B                outchar
   89 000000B0         no_count_offset
   90 000000B0 FA02 F201       LSL              R2, R1
   91 000000B4 EA00 0002       AND              R0, R0, R2
   92 000000B8 FA20 F001       LSR              R0, R1
   93 000000BC F100 0030       ADD              R0, R0, #0x30
   94 000000C0         outchar
   95 000000C0 B403            PUSH             {R0, R1}
   96 000000C2 F7FF FFFE       BL               ST7735_OutChar
   97 000000C6 BC03            POP              {R0, R1}
   98 000000C8 2900            CMP              R1, #0
   99 000000CA DCD6            BGT              outchar_loop
  100 000000CC         ; Deallocate now
  101 000000CC B004            ADD              SP, #16
  102 000000CE E8BD 4800       POP              {R11, LR}



ARM Macro Assembler    Page 3 


  103 000000D2 4770            BX               LR
  104 000000D4         ;* * * * * * * * End of LCD_OutDec * * * * * * * *
  105 000000D4         
  106 000000D4         ; -----------------------LCD _OutFix--------------------
                       --
  107 000000D4         ; Output characters to LCD display in fixed-point format
                       
  108 000000D4         ; unsigned decimal, resolution 0.001, range 0.000 to 9.9
                       99
  109 000000D4         ; Inputs:  R0 is an unsigned 32-bit number
  110 000000D4         ; Outputs: none
  111 000000D4         ; E.g., R0=0,    then output "0.000 "
  112 000000D4         ;       R0=3,    then output "0.003 "
  113 000000D4         ;       R0=89,   then output "0.089 "
  114 000000D4         ;       R0=123,  then output "0.123 "
  115 000000D4         ;       R0=9999, then output "9.999 "
  116 000000D4         ;       R0>9999, then output "*.*** "
  117 000000D4         ; Invariables: This function must not permanently modify
                        registers R4 to R11
  118 000000D4         LCD_OutFix
  119 000000D4 E92D 4800       PUSH             {R11, LR}   ;save R11
  120 000000D8 46EB            MOV              R11, SP
  121 000000DA B40F            PUSH             {R0, R1, R2, R3} ; save number
  122 000000DC         ; Done with allocation
  123 000000DC F04F 0300       MOV              R3, #0
  124 000000E0 F84B 3C04       STR              R3,[R11,#sum] ; sum = 0
  125 000000E4 F84B 3C0C       STR              R3,[R11,#cnt] ; cnt = 0
  126 000000E8         outfix_dec_loop
  127 000000E8 F85B 0C10       LDR              R0, [R11,#n] ; load R3 with num
                                                            ber
  128 000000EC F04F 010A       MOV              R1, #10
  129 000000F0 FBB0 F2F1       UDIV             R2, R0, R1  ; modulo
  130 000000F4 FB01 0012       MLS              R0, R1, R2, R0
  131 000000F8         ;
  132 000000F8 F85B 3C04       LDR              R3, [R11,#sum]
  133 000000FC F85B 2C0C       LDR              R2, [R11,#cnt] ; set r2 to cnt 
                                                            offset
  134 00000100 2A20            CMP              R2, #0x20
  135 00000102 DB0D            BLT              no_more_offset_fix
  136 00000104 F85B 3C08       LDR              R3, [R11,#sum2]
  137 00000108 F1A2 0220       SUB              R2, R2, #0x20
  138 0000010C FA00 F002       LSL              R0, R2
  139 00000110 4403            ADD              R3, R0
  140 00000112 F102 0224       ADD              R2, R2, #0x24
  141 00000116 F84B 3C08       STR              R3, [R11,#sum2]
  142 0000011A F84B 2C0C       STR              R2, [R11,#cnt]
  143 0000011E E008            B                skip_fix
  144 00000120         no_more_offset_fix
  145 00000120 FA00 F002       LSL              R0, R2
  146 00000124 4403            ADD              R3, R0
  147 00000126 F102 0204       ADD              R2, R2, #0x04 ; set next cnt of
                                                            fset
  148 0000012A F84B 3C04       STR              R3, [R11,#sum]
  149 0000012E F84B 2C0C       STR              R2, [R11,#cnt]
  150 00000132         ;
  151 00000132         skip_fix
  152 00000132 F85B 3C10       LDR              R3, [R11,#n] ; load R3 with num
                                                            ber
  153 00000136 FBB3 F3F1       UDIV             R3, R3, R1



ARM Macro Assembler    Page 4 


  154 0000013A F84B 3C10       STR              R3,[R11,#n] ; store r3/10 to th
                                                            e number
  155 0000013E 2B00            CMP              R3, #0
  156 00000140 D1D2            BNE              outfix_dec_loop
  157 00000142 F85B 0C08       LDR              R0, [R11,#sum2]
  158 00000146 F1A0 0004       SUB              R0, R0, #4
  159 0000014A F84B 0C08       STR              R0, [R11,#sum2]
  160 0000014E         outfix_char_loop
  161 0000014E F85B 1C0C       LDR              R1, [R11,#cnt]
  162 00000152 2910            CMP              R1, #0x10
  163 00000154 DC30            BGT              overflow
  164 00000156 F04F 0114       MOV              R1, #0x14
  165 0000015A         outfix_loop
  166 0000015A F85B 0C04       LDR              R0, [R11,#sum]
  167 0000015E F04F 020F       MOV              R2, #0x0F
  168 00000162 F1A1 0104       SUB              R1, R1, #0x04
  169 00000166 290C            CMP              R1, #0x0C
  170 00000168 D014            BEQ              dot_ascii
  171 0000016A DC16            BGT              ones_digit
  172 0000016C F84B 1C0C       STR              R1, [R11,#cnt]
  173 00000170 FA02 F201       LSL              R2, R1
  174 00000174 EA00 0002       AND              R0, R0, R2
  175 00000178 FA20 F001       LSR              R0, R1
  176 0000017C F100 0030       ADD              R0, R0, #0x30
  177 00000180         outfix_char
  178 00000180 B403            PUSH             {R0, R1}
  179 00000182 F7FF FFFE       BL               ST7735_OutChar
  180 00000186 BC03            POP              {R0, R1}
  181 00000188 2900            CMP              R1, #0
  182 0000018A DCE6            BGT              outfix_loop
  183 0000018C         ; Deallocate now
  184 0000018C B004            ADD              SP, #16
  185 0000018E E8BD 4800       POP              {R11, LR}
  186 00000192 4770            BX               LR
  187 00000194         dot_ascii
  188 00000194 F04F 002E       MOV              R0, #0x2E
  189 00000198 E7F2            B                outfix_char
  190 0000019A         ones_digit
  191 0000019A F84B 1C0C       STR              R1, [R11,#cnt]
  192 0000019E F1A1 0104       SUB              R1, R1, #0x04
  193 000001A2 FA02 F201       LSL              R2, R1
  194 000001A6 EA00 0002       AND              R0, R0, R2
  195 000001AA FA20 F001       LSR              R0, R1
  196 000001AE F100 0030       ADD              R0, R0, #0x30
  197 000001B2 F101 0104       ADD              R1, R1, #0x04
  198 000001B6 E7E3            B                outfix_char
  199 000001B8         overflow
  200 000001B8 F04F 0005       MOV              R0, #5
  201 000001BC F84B 0C0C       STR              R0, [R11,#cnt]
  202 000001C0         overflow_loop
  203 000001C0 F85B 1C0C       LDR              R1, [R11,#cnt]
  204 000001C4 2904            CMP              R1, #4
  205 000001C6 D002            BEQ              dot
  206 000001C8 F04F 002A       MOV              R0, #0x2A
  207 000001CC E001            B                skip_dot
  208 000001CE F04F 002E 
                       dot     MOV              R0, #0x2E
  209 000001D2         skip_dot
  210 000001D2 B403            PUSH             {R0, R1}



ARM Macro Assembler    Page 5 


  211 000001D4 F7FF FFFE       BL               ST7735_OutChar
  212 000001D8 BC03            POP              {R0, R1}
  213 000001DA F1A1 0101       SUB              R1, R1, #1
  214 000001DE F84B 1C0C       STR              R1, [R11,#cnt]
  215 000001E2 2900            CMP              R1, #0
  216 000001E4 DCEC            BGT              overflow_loop
  217 000001E6         ; Deallocate now
  218 000001E6 B004            ADD              SP, #16
  219 000001E8 E8BD 4800       POP              {R11, LR}
  220 000001EC 4770            BX               LR
  221 000001EE 00 00           ALIGN
  222 000001F0         ;* * * * * * * * End of LCD_OutFix * * * * * * * *
  223 000001F0         
  224 000001F0                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  225 000001F0                 END                          ; end of file
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\print.
d -o.\print.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --predefine="__MICROLIB SETA 1" --list=.\print.lst Print.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 21 in file Print.s
   Uses
      None
Comment: .text unused
LCD_OutDec 00000000

Symbol: LCD_OutDec
   Definitions
      At line 31 in file Print.s
   Uses
      At line 18 in file Print.s
Comment: LCD_OutDec used once
LCD_OutFix 000000D4

Symbol: LCD_OutFix
   Definitions
      At line 118 in file Print.s
   Uses
      At line 19 in file Print.s
Comment: LCD_OutFix used once
dot 000001CE

Symbol: dot
   Definitions
      At line 208 in file Print.s
   Uses
      At line 205 in file Print.s
Comment: dot used once
dot_ascii 00000194

Symbol: dot_ascii
   Definitions
      At line 187 in file Print.s
   Uses
      At line 170 in file Print.s
Comment: dot_ascii used once
no_count_offset 000000B0

Symbol: no_count_offset
   Definitions
      At line 89 in file Print.s
   Uses
      At line 80 in file Print.s
Comment: no_count_offset used once
no_more_offset 0000004C

Symbol: no_more_offset
   Definitions
      At line 57 in file Print.s
   Uses
      At line 48 in file Print.s
Comment: no_more_offset used once
no_more_offset_fix 00000120

Symbol: no_more_offset_fix



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 144 in file Print.s
   Uses
      At line 135 in file Print.s
Comment: no_more_offset_fix used once
ones_digit 0000019A

Symbol: ones_digit
   Definitions
      At line 190 in file Print.s
   Uses
      At line 171 in file Print.s
Comment: ones_digit used once
outchar 000000C0

Symbol: outchar
   Definitions
      At line 94 in file Print.s
   Uses
      At line 88 in file Print.s
Comment: outchar used once
outchar_loop 0000007A

Symbol: outchar_loop
   Definitions
      At line 73 in file Print.s
   Uses
      At line 99 in file Print.s
Comment: outchar_loop used once
outdec_loop 00000014

Symbol: outdec_loop
   Definitions
      At line 39 in file Print.s
   Uses
      At line 69 in file Print.s
Comment: outdec_loop used once
outfix_char 00000180

Symbol: outfix_char
   Definitions
      At line 177 in file Print.s
   Uses
      At line 189 in file Print.s
      At line 198 in file Print.s

outfix_char_loop 0000014E

Symbol: outfix_char_loop
   Definitions
      At line 160 in file Print.s
   Uses
      None
Comment: outfix_char_loop unused
outfix_dec_loop 000000E8

Symbol: outfix_dec_loop
   Definitions
      At line 126 in file Print.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 156 in file Print.s
Comment: outfix_dec_loop used once
outfix_loop 0000015A

Symbol: outfix_loop
   Definitions
      At line 165 in file Print.s
   Uses
      At line 182 in file Print.s
Comment: outfix_loop used once
overflow 000001B8

Symbol: overflow
   Definitions
      At line 199 in file Print.s
   Uses
      At line 163 in file Print.s
Comment: overflow used once
overflow_loop 000001C0

Symbol: overflow_loop
   Definitions
      At line 202 in file Print.s
   Uses
      At line 216 in file Print.s
Comment: overflow_loop used once
skip 0000005E

Symbol: skip
   Definitions
      At line 64 in file Print.s
   Uses
      At line 56 in file Print.s
Comment: skip used once
skip_dot 000001D2

Symbol: skip_dot
   Definitions
      At line 209 in file Print.s
   Uses
      At line 207 in file Print.s
Comment: skip_dot used once
skip_fix 00000132

Symbol: skip_fix
   Definitions
      At line 151 in file Print.s
   Uses
      At line 143 in file Print.s
Comment: skip_fix used once
21 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

cnt FFFFFFF4

Symbol: cnt
   Definitions
      At line 11 in file Print.s
   Uses
      At line 38 in file Print.s
      At line 46 in file Print.s
      At line 55 in file Print.s
      At line 62 in file Print.s
      At line 76 in file Print.s
      At line 78 in file Print.s
      At line 125 in file Print.s
      At line 133 in file Print.s
      At line 142 in file Print.s
      At line 149 in file Print.s
      At line 161 in file Print.s
      At line 172 in file Print.s
      At line 191 in file Print.s
      At line 201 in file Print.s
      At line 203 in file Print.s
      At line 214 in file Print.s

n FFFFFFF0

Symbol: n
   Definitions
      At line 14 in file Print.s
   Uses
      At line 40 in file Print.s
      At line 65 in file Print.s
      At line 67 in file Print.s
      At line 127 in file Print.s
      At line 152 in file Print.s
      At line 154 in file Print.s

sum FFFFFFFC

Symbol: sum
   Definitions
      At line 12 in file Print.s
   Uses
      At line 37 in file Print.s
      At line 45 in file Print.s
      At line 61 in file Print.s
      At line 74 in file Print.s
      At line 124 in file Print.s
      At line 132 in file Print.s
      At line 148 in file Print.s
      At line 166 in file Print.s

sum2 FFFFFFF8

Symbol: sum2
   Definitions
      At line 13 in file Print.s
   Uses
      At line 49 in file Print.s
      At line 54 in file Print.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 70 in file Print.s
      At line 72 in file Print.s
      At line 81 in file Print.s
      At line 136 in file Print.s
      At line 141 in file Print.s
      At line 157 in file Print.s
      At line 159 in file Print.s

4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ST7735_OutChar 00000000

Symbol: ST7735_OutChar
   Definitions
      At line 16 in file Print.s
   Uses
      At line 96 in file Print.s
      At line 179 in file Print.s
      At line 211 in file Print.s

ST7735_OutString 00000000

Symbol: ST7735_OutString
   Definitions
      At line 17 in file Print.s
   Uses
      None
Comment: ST7735_OutString unused
2 symbols
358 symbols in table
